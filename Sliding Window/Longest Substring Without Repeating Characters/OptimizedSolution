class OptimizedSolution {
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(min(m, n)) where m is the size of the charset
     * @param s: input string
     * @return: length of the longest substring without repeating characters
     */
    public int lengthOfLongestSubstring(String s) {
        Set<Character> set = new HashSet<>();
        int max = 0, left = 0, right = 0;
        while (right < s.length()) {
            char ch = s.charAt(right);
            if (!set.contains(ch)) {
                set.add(ch);
                max = Math.max(max, right - left + 1);
                right++;
            } else {
                set.remove(s.charAt(left));
                left++;
            }
        }
        return max;
    }
}
